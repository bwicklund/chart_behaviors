{
  "_from": "chartkick",
  "_id": "chartkick@2.2.4",
  "_inBundle": false,
  "_integrity": "sha1-Y5FETp/WTYg04P/uS6CRMQ1pfYg=",
  "_location": "/chartkick",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "chartkick",
    "fetchSpec": "latest",
    "name": "chartkick",
    "raw": "chartkick",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/chartkick/-/chartkick-2.2.4.tgz",
  "_shasum": "6391444e9fd64d8834e0ffee4ba091310d697d88",
  "_shrinkwrap": null,
  "_spec": "chartkick",
  "_where": "/Users/bwicklund/Projects/node_experiments",
  "authors": [
    "ankane"
  ],
  "bugs": {
    "url": "https://github.com/ankane/chartkick.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Create beautiful charts with one line of JavaScript",
  "devDependencies": {},
  "homepage": "https://github.com/ankane/chartkick.js",
  "ignore": [
    "**/.*",
    "test",
    "tests"
  ],
  "keywords": [
    "charts"
  ],
  "license": "MIT",
  "main": "chartkick.js",
  "name": "chartkick",
  "optionalDependencies": {},
  "readme": "# Chartkick.js\n\nCreate beautiful charts with one line of JavaScript\n\n[See it in action](http://ankane.github.io/chartkick.js/examples/)\n\nSupports [Chart.js](http://www.chartjs.org/), [Google Charts](https://developers.google.com/chart/), and [Highcharts](http://www.highcharts.com/)\n\nAlso available for [React](https://github.com/ankane/react-chartkick), [Vue.js](https://github.com/ankane/vue-chartkick), [Ruby](https://github.com/ankane/chartkick), [Python](https://github.com/mher/chartkick.py), and [Elixir](https://github.com/buren/chartkick-ex)\n\n## Usage\n\nCreate a div for the chart\n\n```html\n<div id=\"chart-1\" style=\"height: 300px\"></div>\n```\n\nLine chart\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", {\"2013-02-10 00:00:00 -0800\": 11, \"2013-02-11 00:00:00 -0800\": 6})\n```\n\nPie chart\n\n```javascript\nnew Chartkick.PieChart(\"chart-1\", [[\"Blueberry\", 44], [\"Strawberry\", 23]])\n```\n\nColumn chart\n\n```javascript\nnew Chartkick.ColumnChart(\"chart-1\", [[\"Sun\", 32], [\"Mon\", 46], [\"Tue\", 28]])\n```\n\nBar chart\n\n```javascript\nnew Chartkick.BarChart(\"chart-1\", [[\"Work\", 32], [\"Play\", 1492]])\n```\n\nArea chart\n\n```javascript\nnew Chartkick.AreaChart(\"chart-1\", {\"2013-02-10 00:00:00 -0800\": 11, \"2013-02-11 00:00:00 -0800\": 6})\n```\n\nScatter chart\n\n```javascript\nnew Chartkick.ScatterChart(\"chart-1\", [[174.0, 80.0], [176.5, 82.3], [180.3, 73.6]])\n```\n\nGeo chart - *Google Charts*\n\n```javascript\nnew Chartkick.GeoChart(\"chart-1\", [[\"United States\", 44], [\"Germany\", 23], [\"Brazil\", 22]])\n```\n\nTimeline - *Google Charts*\n\n```javascript\nnew Chartkick.Timeline(\"chart-1\", [[\"Washington\", \"1789-04-29\", \"1797-03-03\"], [\"Adams\", \"1797-03-03\", \"1801-03-03\"]])\n```\n\nMultiple series\n\n```javascript\ndata = [\n  {name: \"Workout\", data: {\"2013-02-10 00:00:00 -0800\": 3, \"2013-02-17 00:00:00 -0800\": 4}},\n  {name: \"Call parents\", data: {\"2013-02-10 00:00:00 -0800\": 5, \"2013-02-17 00:00:00 -0800\": 3}}\n]\nnew Chartkick.LineChart(\"chart-1\", data)\n```\n\nMultiple series stacked and grouped - *Chart.js 2.5+ or Highcharts*\n\n```javascript\ndata = [\n  {name: \"Apple\", data: {\"Tuesday\": 3, \"Friday\": 4}, stack: \"fruit\"},\n  {name: \"Pear\", data: {\"Tuesday\": 1, \"Friday\": 8}, stack: \"fruit\"},\n  {name: \"Carrot\", data: {\"Tuesday\": 3, \"Friday\": 4}, stack: \"vegetable\"},\n  {name: \"Beet\", data: {\"Tuesday\": 1, \"Friday\": 8}, stack: \"vegetable\"}\n]\nnew Chartkick.BarChart(\"chart-1\", data, {stacked: true})\n```\n\n### Say Goodbye To Timeouts\n\nMake your pages load super fast and stop worrying about timeouts. Give each chart its own endpoint.\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", \"/stocks\")\n```\n\n### Options\n\nMin and max values\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {min: 1000, max: 5000})\n```\n\n`min` defaults to 0 for charts with non-negative values. Use `null` to let the charting library decide.\n\nColors\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {colors: [\"#b00\", \"#666\"]})\n```\n\nStacked columns or bars\n\n```javascript\nnew Chartkick.ColumnChart(\"chart-1\", data, {stacked: true})\n```\n\nDiscrete axis\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {discrete: true})\n```\n\nLabel (for single series)\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {label: \"Value\"})\n```\n\nAxis titles\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {xtitle: \"Time\", ytitle: \"Population\"})\n```\n\nStraight lines between points instead of a curve\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {curve: false})\n```\n\nHide points\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {points: false})\n```\n\nShow or hide legend\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {legend: true})\n```\n\nSpecify legend position\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {legend: \"bottom\"})\n```\n\nDonut chart\n\n```javascript\nnew Chartkick.PieChart(\"chart-1\", data, {donut: true})\n```\n\nRefresh data from a remote source every `n` seconds\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", url, {refresh: 60})\n```\n\nYou can pass options directly to the charting library with:\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {library: {backgroundColor: \"pink\"}})\n```\n\nSee the documentation for [Chart.js](http://www.chartjs.org/docs/), [Google Charts](https://developers.google.com/chart/interactive/docs/gallery), and [Highcharts](http://api.highcharts.com/highcharts) for more info.\n\n### Global Options\n\nTo set options for all of your charts, use:\n\n```javascript\nChartkick.options = {\n  colors: [\"#b00\", \"#666\"]\n}\n```\n\n### Data\n\nPass data as an array or object\n\n```javascript\nnew Chartkick.PieChart(\"chart-1\", {\"Blueberry\": 44, \"Strawberry\": 23})\nnew Chartkick.PieChart(\"chart-1\", [[\"Blueberry\", 44], [\"Strawberry\", 23]])\n```\n\nTimes can be a `Date`, a timestamp, or a string (strings are parsed)\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", [[new Date(), 5], [1368174456, 4], [\"2013-05-07 00:00:00 UTC\", 7]])\n```\n\n### Download Charts\n\n*Chart.js only*\n\nGive users the ability to download charts. It all happens in the browser - no server-side code needed.\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {download: true})\n```\n\nSet the filename\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {download: \"boom\"})\n```\n\n**Note:** Safari will open the image in a new window instead of downloading.\n\n## Installation\n\nDownload [directly](https://raw.githubusercontent.com/ankane/chartkick.js/master/chartkick.js), or with npm or Bower:\n\n```sh\nnpm install chartkick\n# or\nbower install chartkick\n```\n\nFor Chart.js (works with 2.1+), [download the bundle](http://www.chartjs.org/docs/#getting-started-download-chart-js) and use:\n\n```html\n<script src=\"/path/to/Chart.bundle.js\"></script>\n<script src=\"chartkick.js\"></script>\n```\n\nFor Google Charts, use:\n\n```html\n<script src=\"https://www.gstatic.com/charts/loader.js\"></script>\n<script src=\"chartkick.js\"></script>\n```\n\nFor Highcharts (works with 2.1+), [download it](http://www.highcharts.com/download) and use:\n\n```html\n<script src=\"/path/to/highcharts.js\"></script>\n<script src=\"chartkick.js\"></script>\n```\n\n### Localization\n\nTo specify a language for Google Charts, add:\n\n```javascript\nChartkick.configure({language: \"de\"})\n```\n\nafter the JavaScript files and before your charts.\n\n### Adapter\n\nIf more than one charting library is loaded, choose between them with:\n\n```javascript\nnew Chartkick.LineChart(\"chart-1\", data, {adapter: \"google\"}) // or highcharts\n```\n\n### API\n\nAccess a chart with:\n\n```javascript\nvar chart = Chartkick.charts[\"chart-id\"]\n```\n\nGet the underlying chart object with:\n\n```javascript\nchart.getChartObject()\n```\n\nYou can also use:\n\n```javascript\nchart.getElement()\nchart.getData()\nchart.getOptions()\nchart.getAdapter()\n```\n\nUpdate the data with:\n\n```javascript\nchart.updateData(newData)\n```\n\nYou can also specify new options:\n\n```javascript\nchart.setOptions(newOptions)\n// or\nchart.updateData(newData, newOptions)\n```\n\nRefresh the data from a remote source:\n\n```javascript\nchart.refreshData()\n```\n\nRedraw the chart with:\n\n```javascript\nchart.redraw()\n```\n\nLoop over charts with:\n\n```javascript\nChartkick.eachChart( function(chart) {\n  // do something\n})\n```\n\n## Custom Adapters\n\n**Note:** This feature is experimental.\n\nAdd your own custom adapter with:\n\n```javascript\nvar CustomAdapter = new function () {\n  this.name = \"custom\";\n\n  this.renderLineChart = function (chart) {\n    chart.getElement().innerHTML = \"Hi\";\n  };\n};\n\nChartkick.adapters.unshift(CustomAdapter);\n```\n\nAdd a new chart type with:\n\n```javascript\nvar CustomAdapter = new function () {\n  this.renderCustomChart = function (chart) {\n    chart.getElement().innerHTML = \"Hi\";\n  };\n};\n\nChartkick.CustomChart = function (element, dataSource, options) {\n  Chartkick.createChart(\"CustomChart\", this, element, dataSource, options);\n};\n```\n\n## Examples\n\nTo run the files in the `examples` directory, you'll need a web server.  Run:\n\n```sh\npython -m SimpleHTTPServer\n```\n\nand visit [http://localhost:8000/examples/](http://localhost:8000/examples/)\n\n## Upgrading\n\n### 2.0\n\nBreaking changes\n\n- Chart.js is now the default adapter if multiple are loaded - yay open source!\n- Axis types are automatically detected - no need for `discrete: true`\n- Better date support - dates are no longer treated as UTC\n\n## Credits\n\nChartkick uses [iso8601.js](https://github.com/Do/iso8601.js) to parse dates and times.\n\n## History\n\nView the [changelog](https://github.com/ankane/chartkick.js/blob/master/CHANGELOG.md)\n\nChartkick.js follows [Semantic Versioning](http://semver.org/)\n\n## Contributing\n\nEveryone is encouraged to help improve this project. Here are a few ways you can help:\n\n- [Report bugs](https://github.com/ankane/chartkick.js/issues)\n- Fix bugs and [submit pull requests](https://github.com/ankane/chartkick.js/pulls)\n- Write, clarify, or fix documentation\n- Suggest or add new features\n\nIf you’re looking for ideas, [try here](https://github.com/ankane/chartkick.js/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22).\n\nTo get started with development and testing:\n\n```sh\ngit clone https://github.com/ankane/chartkick.js.git\ncd chartkick.js\npython -m SimpleHTTPServer # starts a web server on port 8000\n```\n\nAnd visit [http://localhost:8000/examples](http://localhost:8000/examples) in your browser.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ankane/chartkick.js.git"
  },
  "version": "2.2.4"
}
